#+TITLE: Divine User Manual
:PREAMBLE:
#+AUTHOR: Thibault Polge
#+EMAIL: thibault@thb.lt
#+DATE: 2020
#+LANGUAGE: en
#+OPTIONS: h:6 num:3

#+TEXINFO_DEFFN: t
#+TEXINFO_DIR_CATEGORY: Emacs
#+TEXINFO_DIR_TITLE: Divine: (divine).

#+TEXINFO_DIR_DESC: Modal editing interface

# Uncomment in 2021.
# +BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-copyright-years
# +BIND: ox-texinfo+-before-export-hook ox-texinfo+-update-version-strings

Divine is a lightweight and extensible modal interface for Emacs, with
support for Vim-like text objects.  It provides a complete and
customizable user interface for text editing, inspired by Emacs
default bindings, and a simple programming interface for designing new
commands, motions, operators and modes.  Its core framework is
completely isolated and can be reused to create completely new modal
interfaces from scratch.

#+begin_export texinfo
@html
    <p>This manual is available in the following formats</p>
    <ul>
    <li><a href="divine.html">HTML, all in one page</a></li>
    <li><a href="index.html">HTML, one page per section</a></li>
@end html
#+end_export

This manual is for Divine version call_version().

#+BEGIN_QUOTE
  Copyright \copy 2020 Thibault Polge <thibault@thb.lt>

  You can redistribute this document and/or modify it under the terms
  of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any
  later version.

  This document is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.
#+END_QUOTE

#+NAME: init
#+begin_src emacs-lisp :exports code :results silent
;; Redefine the Key: list item style
  (defun org-texinfo+key-item (item contents _info)
    (concat (org-texinfo+maybe-begin-list item 'table)
            (let ((head (match-string 2 contents))
                  (body (substring contents (match-end 0))))
              (if (string-match ", " head)
                  (let ((key (substring head 0 (match-beginning 0)))
                        (cmd (substring head (match-end 0))))
                    (format "\
  @kindex %s
  @cindex %s
  @item @kbd{%s} @tie{}@tie{}@tie{}@tie{}%s
  %s" key cmd key cmd body))
                (error "Bad Key item %s" head)))))
#+end_src

#+NAME: version
#+begin_src emacs-lisp :exports none :results raw
  (let ((gitrev (org-trim (shell-command-to-string "git describe"))))
    (if (string= (substring gitrev 1) (divine-version))
        (divine-version)
      (format "%s (git %s)" (divine-version) gitrev)))
#+end_src

#+NAME: describe
#+begin_src emacs-lisp :var func='nil var='nil :exports none :results value raw hsilent
  (let ((type (cond ((and func (macrop func)) "Macro")
                    (func "Function")
                    (var "Variable")
                    (t (error "Cannot describe %s as a function or %s as a variable." func var))))
        (doc (documentation func t)) )
    (with-temp-buffer
      (insert (format " - %s: %s \n\n" type (symbol-name func)))
      (if func (insert (documentation func nil)) (documentation-property var 'variable-documentation nil))
      (when func
        (goto-char (point-max))
        (delete-char -1)
        (beginning-of-line)
        (delete-char 4)
        (kill-line)
        (goto-char (point-min))
        (end-of-line)
        (yank)
        ;; Indent
        (while (not (eobp))
          (next-logical-line)
          (beginning-of-line)
          (insert "    "))
        (buffer-string))))
#+end_src
#+CALL: init()
:END:

* Introduction

*Divine is beta software.*

Divine is a lightweight and extensible modal interface for Emacs, with
support for Vi-like text objects, but designed to integrate naturally
with Emacs.

The most obvious change Divine brings is the introduction of a
so-called “normal” mode, where letter keys don't insert the
corresponding letters into the buffer, but run commands instead.  But
the most fundamental change is the decoupling of operators and text
objects, so that /what/ you want to do and what you want to act /on/
are different part of the command input.  Standard Emacs, for example,
has multiple commands to delete text, depending on what you want to
delete: up to the end of the word, to the end of the line, the region,
and so on.  Divine has only one, ~divine-kill~, bound to =d= by
default.  When you call divine-kill, it kills the region at point, if
there's one; if there isn't, it sets the mark at the point and waits
for the next motion command to delete all text between point and mark.

* Installation

** Manual installation

Clone the source repository somewhere in your ~load-path~, and convert
this manual to texinfo by running:

#+begin_src shell
  makeinfo --no-split divine.texi -o divine.info
  install-info divine.info --dir=dir
#+end_src

Then load Divine from Emacs

#+begin_src emacs-lisp
  (require 'divine)
  (divine-global-mode)
#+end_src

** DONE Install from Melpa

Divine is not yet available from Melpa. When it will be,

** TODO Install from Git, with Borg

** TODO Install from Git, with Straight

* A Tour of Divine
:PROPERTIES:
:custom_id: tour
:END:
This chapter is an informal introduction to Divine.

** Starting Divine
:PROPERTIES:
:nonode: t
:END:

To get started, open any buffer you like and make sure you're in
normal mode by running =M-x divine-normal-mode RET=. (Divine tries to
be smart about the mode it starts in, so some buffers may start in
insert mode)

The minor mode lighter shows the active state.  It should display
=Divine<N>=.

** Basic motion
:PROPERTIES:
:nonode: t
:END:

Basic motion is very close to ordinary Emacs commands: =F= will go
forward one character, =B= backward.  =f= and =b= will move forward
and backward a word, respectively.

With =p= and =n=, you move to the previous
and the next visible line, respectively.  =a= and =e= go to the
beginning and end of the current line, =A= end =E= move through
sentences.

=isearch= is on =s=, =r= for backwards.  =S= and =R= activate regexp
search.


* Editing with Divine
:PROPERTIES:
:custom_id: fundamental-concepts
:END:

This section is a complete presentation of the Divine editing
features.  A less formal, but less complete, presentation can be found
in [[#tour]], which is a recommended read.

People who wish to build their own modal interface over the Divine
core may skip most of this chapter, but should nonetheless read the
description of the fundamental Divine concepts at the top of each node.

** Motion commands

In Divine, a *motion* is a command that moves the point around.
Divine motions are nothing special, and are often regular Emacs
commands.  Motions can be used in two ways.  You can use them like in
regular Emacs, to move around in a buffer.  They can also be combined
with [[#operators]] to determine the region they operate on.

*** Standard motion commands

**** Basic motion
:PROPERTIES:
:nonode: t
:END:

 - Key: b, COUNT word(s) forward!
 - Key: f, COUNT word(s) backward.
 - Key: B, COUNT words(s) forward, in ~superword-mode~.
 - Key: F, COUNT words(s) backward, in ~superword-mode~.
 - Key: C-B, COUNT characters(s) forward.
 - Key: C-F, COUNT characters(s) backward.
 - Key: p, COUNT line(s) forward.
 - Key: n, COUNT line(s) backward.
 - Key: p, COUNT paragraphs(s) forward.
 - Key: n, COUNT paragraphs(s) backward.
 - Key: a, to the first non last character of current line.
 - Key: e, to the first non blank character of current line.

**** Moving by searching
:PROPERTIES:
:nonode: t
:END:

- Key: t, Before COUNTh occurrence of CHAR forward (after if SCOPE).
- Key: T, Before COUNTh occurrence of CHAR backward (after if SCOPE).
- Key: s, isearch forward.
- Key: S, isearch backward.

**** Moving around balanced expressions
:PROPERTIES:
:nonode: t
:END:

** Operators
:PROPERTIES:
:custom_id: operators
:END:

Like Vim and other modal editors, Divine has *operators*.  At their
core, most operators are commands that act on a region.  If a region
is active, invoking an operator will run it on that region, in the
same way Emacs' ordinary ~*-region~ commands act (as an example,
pressing =d= will immediately delete the region).  If no region is
active, though, Divine enters the “pending operator” state.  The
operator is then said to be “pending”, and will run as soon as the
point moves, between its previous and new positions.

*** Standard operators
:PROPERTIES:
:nonode: t
:END:

The first three operators' bindings can be pressed twice to operate on
the current line.  For example, =dd= kills the current line.

 - Key: k, Kill REGION* to REGISTER.
 - Key: c, Kill REGION* to REGISTER, then enter insert mode.
 - Key: w, Copy REGION* to REGISTER.

 - Key: w, wrap REGION with DELIMITER.
 - Key: =, indent REGION.
 - Key: SPC o, Sort REGION.

** Text objects

A text object is similar to a motion, except that it acts on both the
point and the mark.  There are two types of text objects: *scoped
motions*, which are regular motions with a scope modifier, and *pure
text objects*, which cannot be used as motions.  Some text objects are
also *special*: special text objects replace pending operators with
their own implementation.

*** Scopes and scoped motions
:PROPERTIES:
:custom_id: scopes-and-scoped-motions
:DESCRIPTION: Using standard motions as text objects
:END:

The most common text objects are *scoped motions*.  Standard motions,
 when called with a scope modifier, behave as text objects by moving
 the mark to the beginning of the thing they normally navigate, and
 the point in the normal way.

Divine commands know two standard scopes: =inside= and =around=.
activated by =i= and =ii=, respectively.  Most basic motion commands
respect these scopes, and behave as text objects when one is active.
For example, =di2w= will delete two full words, starting from the one
the point's on.  =da2w= will do the same, also eating the surrounding
space.

 - Key =i=, increase scope.

   If no scope is currently active, activate the INSIDE scope.
   Otherwise, activate AROUND.

*** Pure text objects
:PROPERTIES:
:DESCRIPTION: Objects that cannot be use as motions
:END:

*** Special text object
:PROPERTIES:
:DESCRIPTION: The special balanced expression text object
:END:

A special text object is a text object that can replace a pending
operator.  This is meant to let standard operators apply to cases they
weren't designed to.  Divine has only one such text object, =w=, the
balanced expression operator, that can be used to rewrap or unwrap
balanced expressions with the change and delete operator, and no
scope.

 - Key: w, Balanced expression text object.

   Prompt for a pair delimiter, and selects the COUNTh balanced
   expression containing the point and bounded by this delimiter.

   If SCOPE is =inside=, the contents of the expressions are selected.

   If SCOPE is =around=, the delimiters are selected as well.

   If no SCOPE, and =divine-kill= or =divine-change= are pending,
   they're replaced with ~divine-unwrap~ or ~divine-rewrap~,
   respectively.

** Actions

Actions are simple commands that don't use the region and cannot be
combined with anything else.  Actions change the value of neither the
point nor the mark, unless they modify the buffer contents (for
example, =y= modifies the point by moving it after the inserted text).

In standard binding evaluation order, actions have the higher priority.

*** Standard actions
:PROPERTIES:
:nonode: t
:END:

 - Key: d, delete COUNT character(s) forward.
 - Key: r, replace COUNT character(s) forward with CHAR.
 - Key: RET, open line after current line.
 - Key: y, Insert contents of REGISTER at point, or COUNTh entry in
   kill-ring.

** Modes

Divine is a modal interface.  A modal interface is an interface in
which the results of an action is determined by the current mode.
Although Divine provides a complete set modes, this chapter will only
focus on the two most essential: *Normal* and *Insert*.

 - *Insert mode* ::  is similar to regular Emacs, except it has a
   binding to switch to Normal mode.

*Normal mode* binds single letters to composable action and motion
commands.  It is also the entry point to other modes.

Modes in Divine can be activated permanently or temporarily.
Temporary activation is called *transient*.  A transient mode will
terminate and revert to the previous mode as soon as an action has
completed.

Being transient isn't a property of the mode, but of the activation of
a mode.

** Commands

A *command* is nothing more than a regular Emacs command, that is, an
~(interactive)~ function.  Commands can be bound in Divine the same
way they're bound in regular Emacs.  Because Divine underlying
interface is a bit more tricky than Emacs',

* Extending Divine
:PROPERTIES:
:custom_id: extending-divine
:END:

This chapter describes how you can add create your own operators,
motions, and modes on top of the standard interface.


** Key bindings

*** Adding and removing bindings

Divine has a special keybinding mechanism that allows to easily bind
different commands on the same key, to be selected depending on
context.  For a given key, in a given Divine mode, a binding can be
conditioned by three different predicates, which can be combined:

 - a *mode predicate*, which limits this bindings to a given Emacs mode;
 - a *type predicate*, which runs this binding when a given Divine
   command type is legal (action, motion, object, operator…)
 - an *arbitrary elisp predicate*, which can be used to further
   specialize the binding.

All predicates default to an always-true value; they thus must all
evaluate to non-nil at the moment the user triggers a binding for
their associated command to run.

#+CALL: describe(func='divine-define-key)

#+ATTR_TEXINFO: :tag Notice
#+BEGIN_QUOTE
  The ~:type~ of a binding is only used to choose between multiple
  bindings on the same key.  It has no effect on the actual command
  being run.
#+END_QUOTE

*** Keybindings evaluation order

As specified above, binding definitions have three conditions: emacs
mode, binding type, and an arbitrary predicate.

~divine-define-key~ also sorts binding definitions, so that their
evaluation order is determined and, if possible, makes sense.
Comparing two bindings is done in the following order:

 1. Emacs modes are first sorted alphabetically. The special value ~t~,
    which enables the binding for all modes and is the default for
    ~:mode~, sorts after everything else, so mode-specific bindings get
    evaluated before generic bindings.
 2. If Emacs modes are equal, types are compared by the order they
    appear in the car of each element of ~divine-binding-states~.  The
    default magic value for ~:type~, t, should be present in
    ~divine-binding-states~ in last position.  That is, evaluation is
    performed in the order specified by this variable.

    The default value orders types as follows:

    1. ~action~ runs iff the region isn't active and no operator
       is pending.
    2. ~operator~ runs iff the region is active or no operator is
       pending.
    3. ~default-motion~ runs iff the previous command was called with
       the same binding and set an operator as pending.

 3. If types are equal, predicates are compared the same way Emacs mode
    are.  At this point, predicates cannot be equal: for a given key on
    a given Divine mode, bindings are identified by the triplet (mode,
    type, predicate).  Inserting a new binding with the same three
    values replace the existing binding.

Bindings are evaluated in the order defined by the variable
~divine-binding-types~.

** Creating actions

The easiest way to create an action is the ~divine-defaction~ macro.

#+CALL: describe(func='divine-defaction)

** Creating operators

#+CALL:describe(func='divine-defoperator)

To access the prefix argument from within an operator, see
[[#reading-prefix-arg]].

** Creating motions and text objects

** Creating hybrid bindings

** Using the numeric argument
:PROPERTIES:
:custom_id: reading-prefix-arg
:END:

** Creating modes

#+CALL: describe(func='divine-defmode)

* The Divine framework
:PROPERTIES:
:custom_id: framework
:END:

Divine was designed with extensibility and modularity in mind.  The
modal user interface Divine provides is implemented on top of a very
abstract core, contained in =divine-core.el=.  This core has no
dependencies besides core Emacs.  This chapter describes what it
provides, and how you can write custom modal interfaces over it.

Notice that the commands library =divine-commands.el= makes very few
assumptions about the general interface it's called from, and thus is
generally usable to implement custom Divine interfaces.

** Starting Divine

The core is not complete in itself.  You need to provide at least the
=divine-start= function.

 - *divine-start*

   =divine-mode= calls =divine-start= with no argument to initialize
   Divine.  =divine-start= should activate a Divine mode (or calling
   =divine-mode= will have no effect) and can do can do anything
   needed to initialize Divine.

   In the default interface, divine-start also registers a few hooks.

** The Divine command loop

Divine plugs itself into multiple into of the Emacs command loop,
using only Emacs standard hooks.

#+CALL: describe(func='divine-pre-command-hook)

** Mode switching and transient modes

** Scopes internals

The standard scope modifiers =around= and =inside= are not part of the
core.  All the core provides is a scope definition macro,
=divine-defscope=.

#+CALL: describe(func='divine-defscope)

** Key binding interface internals

* Reading Divine docstrings
:PROPERTIES:
:APPENDIX:   t
:END:

Divine docstrings may include one or more of the following
placeholders:

 - ~COUNT~ :: The numeric argument, or 1.
 - ~COUNTh~ :: The numeric argument, or 1, as an ordinal value.
 - ~REGISTER~ :: The register argument.
 - ~REGISTER*~ :: The register argument, or a default, non-register
   storage, usually the kill ring.
 - ~SCOPE~ :: The selected scope.  “If SCOPE” means: if a scope is
   selected.
 - ~CHAR~ :: A character the command will prompt the user for.
 - ~DELIMITER~ :: Like CHAR, for pairable characters, like (), [], {},
   etc.

#  LocalWords:  Uncomment texinfo Thibault Polge thibault docstring docstrings
#  LocalWords:  customizable
